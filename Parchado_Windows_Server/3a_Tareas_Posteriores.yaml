---
# ansible-playbook 3a_Tareas_Posteriores.yaml

- name: Tareas Posteriores
  hosts: windows
  become: yes
  become_method: runas  # Utilizar runas en Windows
  become_user: ansible  # Usuario administrador en Windows
  gather_facts: True  # Habilitar la recolección de hechos
  tasks:

# Requisitos previos

    - name: Crear archivo para almacenar resultados de las tareas Posteriores
      win_file:
        path: "C:\\parchado\\tareas_posteriores-{{ ansible_date_time.date }}.txt"
        state: touch

    - name: Observar la hora del sistema, el hostname y la IP
      win_shell: |
        Write-Host "#####################################################################################"
        Write-Host "#### Observar la hora del sistema, el hostname y la IP"
        Write-Host "#####################################################################################"
        Get-Date; hostname; (Get-NetIPAddress | Where-Object { $_.AddressFamily -eq 'IPv4' }).IPAddress
      register: dateInfo

    - name: Mostrar la hora del sistema, el hostname y la IP
      debug:
        msg: "La hora del sistema, el hostname y la IP es {{ dateInfo.stdout }}"
    
    - name: Guardar resultado de la hora del sistema, el hostname y la IP
      win_lineinfile:
        line: "{{ dateInfo.stdout }}"
        path: "C:\\parchado\\tareas_posteriores-{{ ansible_date_time.date }}.txt"
        insertafter: EOF

    - name: Validar reinicio de servidor posterior al parchado
      win_shell: |
        Write-Host "#####################################################################################"
        Write-Host "#### Validar reinicio de servidor posterior al parchado"
        Write-Host "#####################################################################################"
        systeminfo | Select-String "Boot Time"
      register: uptime
    
    - name: Mostrar reinicio de servidor posterior al parchado
      debug:
        msg: "El reinicio de servidor posterior al parchado es {{ uptime.stdout }}"
    
    - name: Guardar resultado de reinicio de servidor posterior al parchado
      win_lineinfile:
        line: "{{ uptime.stdout }}"
        path: "C:\\parchado\\tareas_posteriores-{{ ansible_date_time.date }}.txt"
        insertafter: EOF

    - name: Validar estado de servicios y performance
      win_shell: |
        Write-Host "#####################################################################################"
        Write-Host "#### Validar estado de servicios y performance"
        Write-Host "#####################################################################################"
        Get-Process | Sort-Object CPU -Descending | Select-Object -First 10
      register: top
    
    - name: Mostrar estado de servicios y performance
      debug:
        msg: "El estado de servicios y performance es {{ top.stdout }}"
    
    - name: Guardar resultado de validación de estado de servicios y performance
      win_lineinfile:
        line: "{{ top.stdout }}"
        path: "C:\\parchado\\tareas_posteriores-{{ ansible_date_time.date }}.txt"
        insertafter: EOF

    - name: Mostrar el historial de actualizaciones instaladas
      win_shell: |
        Write-Host "#####################################################################################"
        Write-Host "#### Mostrar el historial de actualizaciones instaladas"
        Write-Host "#####################################################################################"
        Get-WUHistory -Last 2 | Format-List
      args:
        executable: powershell.exe
      register: history_updates

    - name: Guardar historial de actualizaciones instaladas en un archivo
      win_lineinfile:
        line: "{{ history_updates.stdout }}"
        path: "C:\\parchado\\tareas_posteriores-{{ ansible_date_time.date }}.txt"
        insertafter: EOF

    - name: Mostrar el historial de actualizaciones instaladas
      debug:
        msg: "{{ history_updates.stdout }}"

    ## Si necesitas desinstalar alguna actualización específica, puedes agregar la tarea a continuación
    # - name: Desinstalar una actualización específica (ejemplo con KB5036620)
    #   win_shell: |
    #     Remove-WindowsUpdate -KBArticleID KB5036620
    #   args:
    #     executable: powershell.exe